---
.python-default:
  image: python:$PYTHON_VERSION-slim-bullseye
  tags:
    - linux
  variables:
    LIVE_TIMING_SESSION: "2020/11/29/race"
    POETRY_VERSION: "1.5.*"
    PYTHON_VERSION: "3.11"

.snippets:
  poetry_setup:
    - python --version ; pip --version # For debugging
    - pip install poetry==$POETRY_VERSION
    - poetry config virtualenvs.in-project true
    - poetry config installer.max-workers 4
    - poetry --version
  dagster_setup:
    - mkdir /tmp/.dagster
    - cp ./.ci/dagster.yaml /tmp/.dagster/dagster.yaml
  run_dagster_jobs:
    - poetry run dagster job execute -d duck_f1 -m pipelines -j ergast
    - poetry run dagster job execute -d duck_f1 -m pipelines -j live_timing

stages:
  - test
  - build
  - deploy

python::linting:
  extends: .python-default
  stage: test
  allow_failure: true
  before_script:
    - !reference [.snippets, poetry_setup]
    - poetry install --with dev
  script:
    - poetry run flake8 duck_f1 --max-line-length=100

python::tests::unit:
  extends: .python-default
  stage: test
  before_script:
    - !reference [.snippets, poetry_setup]
    - poetry install --with dev
    - poetry run dbt deps --project-dir=./duck_f1/transform/
  script:
    - poetry run coverage run -m pytest tests -v --junitxml=report.xml
    - poetry run coverage xml
    - poetry run coverage report --show-missing --precision=2
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: report.xml

dbt::compile:
  extends: .python-default
  stage: build
  services:
    - postgres
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: username
    POSTGRES_PASSWORD: password
    POSTGRES_HOST_AUTH_METHOD: trust
    DAGSTER_HOME: /tmp/.dagster
    ENV: dev
    OUTPUT_DIR: /tmp/data
    DUCK_DB_PATH: /tmp/data/f1.duckdb
  before_script:
    - !reference [.snippets, poetry_setup]
    - poetry install --with ci
    - !reference [.snippets, dagster_setup]
    - poetry run dbt deps --project-dir=./duck_f1/transform
    - !reference [.snippets, run_dagster_jobs]
    - cd duck_f1/transform
  script:
    - poetry run dbt compile

pages:
  extends: .python-default
  stage: deploy
  services:
    - postgres
  variables:
    POSTGRES_DB: postgres
    POSTGRES_USER: username
    POSTGRES_PASSWORD: password
    POSTGRES_HOST_AUTH_METHOD: trust
    DAGSTER_HOME: /tmp/.dagster
    ENV: dev
    OUTPUT_DIR: /tmp/data
    DUCK_DB_PATH: /tmp/data/f1.duckdb
  before_script:
    - !reference [.snippets, poetry_setup]
    - poetry install --with ci
    - !reference [.snippets, dagster_setup]
    - poetry run dbt deps --project-dir=./duck_f1/transform
    - !reference [.snippets, run_dagster_jobs]
    - cd duck_f1/transform
    - poetry run dbt build
  script:
    - poetry run dbt docs generate
  artifacts:
    paths:
      - duck_f1/transform/target
  publish: duck_f1/transform/target
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
